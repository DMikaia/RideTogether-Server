generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique @default(uuid())
  username  String  @unique
  name      String  @unique
  email     String  @unique
  image     String?

  creationDate DateTime @default(now()) @map("creation_date")
  updateDate   DateTime @updatedAt @map("update_date")

  reviewsGiven    Review[] @relation("ReviewerReviews")
  reviewsReceived Review[] @relation("RecipientReviews")

  messagesSent     Message[] @relation("SentMessages")

  offers Offer[] @relation("OwnerOffers")

  roomAsParticipant Room[] @relation("UserRoomsAsParticipant")
  roomAsOwner       Room[] @relation("UserRoomsAsOwner")

  offersParticipated Offer[] @relation("OfferParticipants")

  @@index([id, email])
  @@map("users")
}

model Review {
  id          Int    @id @default(autoincrement())
  text        String
  stars       Int
  reviewerId  String @map("reviewer_id")
  recipientId String @map("recipient_id")

  offerId     String @map("offer_id")
  offer       Offer @relation("offerReviews", fields: [offerId], references: [id])

  reviewer  User @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  recipient User @relation("RecipientReviews", fields: [recipientId], references: [id])

  @@map("reviews")
}

model Offer {
  id               String   @id @unique @default(uuid())
  departurePlace   String   @map("departure_place")
  destinationPlace String   @map("destination_place")
  departureDate    DateTime @map("departure_date")
  image            String?
  vehicle          String
  createdAt        DateTime @default(now()) @db.Timestamptz()

  closed Boolean @default(false)
  seats  Int
  taken  Int     @default(0)

  participants  User[] @relation("OfferParticipants")
  reviews       Review[] @relation("offerReviews")

  ownerId       String @map("owner_id")
  owner         User   @relation("OwnerOffers", fields: [ownerId], references: [id])

  room  Room?  @relation("OfferRooms")

  @@map("offers")
}

model Room {
  id           String    @id @unique @default(uuid())
  name         String    @unique
  offerId      String    @unique() @map("offer_id")
  offer        Offer     @relation("OfferRooms", fields: [offerId], references: [id])
  ownerId      String    @map("owner_id")
  owner        User      @relation("UserRoomsAsOwner", fields: [ownerId], references: [id])
  participants User[]    @relation("UserRoomsAsParticipant")
  messages     Message[] @relation("RoomMessages")

  @@map("rooms")
}

model Message {
  id             String  @id @unique @default(uuid())
  senderId       String  @map("sender_id")
  content        String
  roomId String  @map("conversation_id")

  createdAt      DateTime @default(now()) @db.Timestamptz()

  sender       User         @relation("SentMessages", fields: [senderId], references: [id])
  room         Room @relation("RoomMessages", fields: [roomId], references: [id])

  @@map("messages")
}
